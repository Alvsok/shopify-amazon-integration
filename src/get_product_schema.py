# -*- coding: utf-8 -*-
"""
–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º—ã –ø–æ–ª–µ–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –¥–≤–æ—Ä–Ω–∏–∫–∏" 
–Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Amazon –ê–≤—Å—Ç—Ä–∞–ª–∏—è
"""
import os
import json
import requests
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from test_integration import AmazonSandboxClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

class AmazonProductSchemaClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º —Ç–æ–≤–∞—Ä–æ–≤ Amazon"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–∫–µ–Ω–∞–º
        self.base_client = AmazonSandboxClient()
        
        # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã Amazon
        self.marketplaces = {
            'USA': 'ATVPDKIKX0DER',
            'CANADA': 'A2EUQ1WTGCTBG2', 
            'MEXICO': 'A1AM78C64UM0Y8',
            'AUSTRALIA': 'A39IBJ37TRP1C6',  # –ê–≤—Å—Ç—Ä–∞–ª–∏—è
            'UK': 'A1F83G8C2ARO7P',
            'GERMANY': 'A1PA6795UKMFR9',
            'FRANCE': 'A13V1IB3VIYZZH',
            'ITALY': 'APJ6JRA9NG5V4',
            'SPAIN': 'A1RKKUPIHCS9HS',
            'JAPAN': 'A1VC38T7YXB528'
        }
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–≤–æ—Ä–Ω–∏–∫–æ–≤
        self.wiper_product_types = [
            'WIPER_BLADE',
            'AUTO_PART', 
            'AUTOMOTIVE_REPLACEMENT_PART',
            'WIPER_ARM',
            'WINDSHIELD_WIPER',
            'AUTO_ACCESSORY'
        ]
        
        # –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        self.endpoints = {
            'NA': 'https://sellingpartnerapi-na.amazon.com',  # –°–®–ê, –ö–∞–Ω–∞–¥–∞, –ú–µ–∫—Å–∏–∫–∞
            'EU': 'https://sellingpartnerapi-eu.amazon.com',  # –ï–≤—Ä–æ–ø–∞
            'FE': 'https://sellingpartnerapi-fe.amazon.com'   # –î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫ (–≤–∫–ª—é—á–∞—è –ê–≤—Å—Ç—Ä–∞–ª–∏—é)
        }
    
    def get_region_endpoint(self, marketplace_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ ID –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
        if marketplace_id in ['ATVPDKIKX0DER', 'A2EUQ1WTGCTBG2', 'A1AM78C64UM0Y8']:
            return self.endpoints['NA']
        elif marketplace_id in ['A39IBJ37TRP1C6', 'A1VC38T7YXB528']:  # –ê–≤—Å—Ç—Ä–∞–ª–∏—è, –Ø–ø–æ–Ω–∏—è
            return self.endpoints['FE']
        else:
            return self.endpoints['EU']  # –ï–≤—Ä–æ–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def search_product_types(self, marketplace_id, keywords='wiper'):
        """–ò—â–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        print(f"üîç –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keywords}")
        print(f"üìç –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            access_token = self.base_client.get_access_token()
            if not access_token:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç
            base_url = self.get_region_endpoint(marketplace_id)
            
            headers = {
                'x-amz-access-token': access_token,
                'Content-Type': 'application/json'
            }
            
            api_version = "2020-09-01"
            url = f"{base_url}/definitions/{api_version}/productTypes"
            
            params = {
                'marketplaceIds': marketplace_id
            }
            
            print(f"üåê –ó–∞–ø—Ä–æ—Å –∫: {url}")
            
            response = requests.get(url, params=params, headers=headers)
            response.raise_for_status()
            
            data = response.json()
            product_types = data.get('productTypes', [])
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(product_types)} —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            matching_types = []
            for ptype in product_types:
                name = ptype.get('name', '').upper()
                display_name = ptype.get('displayName', '').upper()
                
                if any(keyword.upper() in name or keyword.upper() in display_name 
                      for keyword in keywords.split()):
                    matching_types.append(ptype)
            
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(matching_types)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∏–ø–æ–≤:")
            for ptype in matching_types:
                print(f"   ‚Ä¢ {ptype.get('name')} - {ptype.get('displayName')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"product_types_{marketplace_id}_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'marketplace_id': marketplace_id,
                    'total_types': len(product_types),
                    'matching_types': matching_types,
                    'all_types': product_types
                }, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            return matching_types
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            if hasattr(e, 'response') and e.response:
                print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {e.response.status_code}")
                print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
            return None
    
    def get_product_type_definition(self, product_type, marketplace_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ö–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞"""
        print(f"‚öôÔ∏è  –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ç–∏–ø–∞ '{product_type}'...")
        print(f"üìç –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            access_token = self.base_client.get_access_token()
            if not access_token:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç
            base_url = self.get_region_endpoint(marketplace_id)
            
            headers = {
                'x-amz-access-token': access_token,
                'Content-Type': 'application/json'
            }
            
            api_version = "2020-09-01"
            url = f"{base_url}/definitions/{api_version}/productTypes/{product_type}"
            
            params = {
                'marketplaceIds': marketplace_id,
                'requirements': 'LISTING',  # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞
                'requirementsEnforced': 'ENFORCED'  # –¢–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            }
            
            print(f"üåê –ó–∞–ø—Ä–æ—Å –∫: {url}")
            
            response = requests.get(url, params=params, headers=headers)
            response.raise_for_status()
            
            schema = response.json()
            print("‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É
            self.analyze_schema(schema, product_type)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"schema_{product_type}_{marketplace_id}_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(schema, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {filename}")
            return schema
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ö–µ–º—ã: {e}")
            if hasattr(e, 'response') and e.response:
                print(f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {e.response.status_code}")
                print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
            return None
    
    def analyze_schema(self, schema, product_type):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–µ–º–µ"""
        print("\n" + "="*60)
        print(f"üìä –ê–ù–ê–õ–ò–ó –°–•–ï–ú–´ –î–õ–Ø –¢–ò–ü–ê: {product_type}")
        print("="*60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        schema_info = schema.get('schema', {})
        properties = schema_info.get('properties', {})
        required = schema_info.get('required', [])
        
        print(f"üìã –í—Å–µ–≥–æ –ø–æ–ª–µ–π –≤ —Å—Ö–µ–º–µ: {len(properties)}")
        print(f"üî¥ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {len(required)}")
        
        if required:
            print("\nüî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø:")
            print("-" * 40)
            for field in required:
                field_info = properties.get(field, {})
                field_type = field_info.get('type', 'unknown')
                description = field_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                
                print(f"‚Ä¢ {field}")
                print(f"  –¢–∏–ø: {field_type}")
                print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}{'...' if len(description) > 100 else ''}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                if 'enum' in field_info:
                    print(f"  –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {field_info['enum'][:5]}{'...' if len(field_info['enum']) > 5 else ''}")
                if 'maxLength' in field_info:
                    print(f"  –ú–∞–∫—Å. –¥–ª–∏–Ω–∞: {field_info['maxLength']}")
                if 'pattern' in field_info:
                    print(f"  –§–æ—Ä–º–∞—Ç: {field_info['pattern']}")
                print()
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–ø–µ—Ä–≤—ã–µ 10)
        optional_fields = [f for f in properties.keys() if f not in required]
        if optional_fields:
            print(f"\nüíô –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ü–û–õ–Ø (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(optional_fields)}):")
            print("-" * 50)
            for field in optional_fields[:10]:
                field_info = properties.get(field, {})
                field_type = field_info.get('type', 'unknown')
                description = field_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                
                print(f"‚Ä¢ {field} ({field_type})")
                print(f"  {description[:80]}{'...' if len(description) > 80 else ''}")
        
        print("\n" + "="*60)
    
    def test_all_wiper_types(self, marketplace_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–≤–æ—Ä–Ω–∏–∫–æ–≤"""
        print("üß™ –¢–ï–°–¢–ò–†–£–ï–ú –í–°–ï –í–û–ó–ú–û–ñ–ù–´–ï –¢–ò–ü–´ –î–í–û–†–ù–ò–ö–û–í")
        print("="*50)
        
        successful_types = []
        
        for product_type in self.wiper_product_types:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø: {product_type}")
            schema = self.get_product_type_definition(product_type, marketplace_id)
            
            if schema:
                successful_types.append(product_type)
                print(f"‚úÖ {product_type} - —Å—Ö–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            else:
                print(f"‚ùå {product_type} - –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞")
        
        print(f"\nüìä –ò–¢–û–ì–û:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å—Ö–µ–º—ã –¥–ª—è: {successful_types}")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {[t for t in self.wiper_product_types if t not in successful_types]}")
        
        return successful_types

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–û–õ–£–ß–ï–ù–ò–ï –°–•–ï–ú–´ –¢–û–í–ê–†–ê '–ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–´–ï –î–í–û–†–ù–ò–ö–ò'")
    print("üá¶üá∫ –ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°: Amazon –ê–≤—Å—Ç—Ä–∞–ª–∏—è")
    print("="*60)
    
    client = AmazonProductSchemaClient()
    australia_marketplace = client.marketplaces['AUSTRALIA']
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
    print("üìã –®–ê–ì 1: –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤")
    matching_types = client.search_product_types(australia_marketplace, 'wiper blade auto part')
    
    if matching_types:
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–∏–ø—ã:")
        for ptype in matching_types:
            print(f"   ‚Ä¢ {ptype.get('name')} - {ptype.get('displayName')}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        first_type = matching_types[0]['name']
        print(f"\nüìã –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è —Ç–∏–ø–∞ '{first_type}'")
        schema = client.get_product_type_definition(first_type, australia_marketplace)
        
    else:
        print("\n‚ö†Ô∏è  –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–∏–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫.")
        print("üìã –®–ê–ì 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã
        successful_types = client.test_all_wiper_types(australia_marketplace)
        
        if successful_types:
            print(f"\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: {successful_types[0]}")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Sandbox –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("   ‚Ä¢ –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
            print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤")

if __name__ == '__main__':
    main()