# -*- coding: utf-8 -*-
import os
import requests
import json
import hashlib
import hmac
import base64
from datetime import datetime
from typing import Dict, Optional
from dotenv import load_dotenv
from urllib.parse import urlencode, quote

# Load environment variables
load_dotenv()

class AmazonSandboxClient:
    """Amazon Selling Partner API Sandbox Client with detailed logging"""
    
    def __init__(self):
        self.client_id = os.getenv('AMAZON_CLIENT_ID')
        self.client_secret = os.getenv('AMAZON_CLIENT_SECRET')
        self.refresh_token = os.getenv('AMAZON_REFRESH_TOKEN')
        self.sandbox_url = "https://sandbox.sellingpartnerapi-na.amazon.com"
        self.token_url = "https://api.amazon.com/auth/o2/token"
        self.access_token = None
    
    def get_access_token(self) -> Optional[str]:
        """Get access token using refresh token"""
        print("üîë –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º access token —É Amazon...")
        print(f"   Client ID: {self.client_id[:20]}...")
        print(f"   Refresh Token: {self.refresh_token[:30] if self.refresh_token else '–ù–ï –ù–ê–ô–î–ï–ù'}...")
        
        try:
            token_data = {
                'grant_type': 'refresh_token',
                'refresh_token': self.refresh_token,
                'client_id': self.client_id,
                'client_secret': self.client_secret
            }
            
            response = requests.post(self.token_url, data=token_data)
            print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code != 200:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.text}")
                return None
                
            response.raise_for_status()
            
            token_response = response.json()
            self.access_token = token_response['access_token']
            
            expires_in = token_response.get('expires_in', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            token_type = token_response.get('token_type', 'Bearer')
            
            print(f"   ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –¢–∏–ø —Ç–æ–∫–µ–Ω–∞: {token_type}")
            print(f"   –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: {expires_in} —Å–µ–∫—É–Ω–¥")
            print(f"   Access token: {self.access_token[:50]}...")
            
            return self.access_token
            
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
        except KeyError as e:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ: {e}")
            print(f"   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text if 'response' in locals() else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
            return None
    
    def make_api_request(self, endpoint: str, method: str = 'GET', data: Dict = None, params: Dict = None) -> Optional[Dict]:
        """Make authenticated API request to Amazon with proper headers"""
        if not self.access_token:
            print("‚ö†Ô∏è  Access token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π...")
            if not self.get_access_token():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
                return None
        
        headers = {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'x-amz-access-token': self.access_token,
            'User-Agent': 'shopify-amazon-integration/1.0'
        }
        
        url = f"{self.sandbox_url}{endpoint}"
        
        print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Amazon API:")
        print(f"   URL: {url}")
        print(f"   –ú–µ—Ç–æ–¥: {method}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: Authorization=Bearer ..., x-amz-access-token=...")
        if params:
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        try:
            if method.upper() == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method.upper() == 'POST':
                response = requests.post(url, headers=headers, json=data, params=params)
            else:
                print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
                return None
            
            print(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
            print(f"   –ü–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞: {response.url}")
            print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
            
            if response.status_code == 200:
                print("   ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                try:
                    json_response = response.json()
                    print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(json_response.keys()) if isinstance(json_response, dict) else '–ù–µ JSON –æ–±—ä–µ–∫—Ç'}")
                    return json_response
                except json.JSONDecodeError:
                    print("   ‚ö†Ô∏è  –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
                    print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:200]}...")
                    return None
            else:
                print(f"   ‚ùå API –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                return None
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None
    
    def test_marketplace_participation(self) -> bool:
        """
        –¢–µ—Å—Ç: Marketplace Participation API
        
        –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
        - –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ marketplace (—Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö)
        - –ù–∞ –∫–∞–∫–∏—Ö Amazon –ø–ª–æ—â–∞–¥–∫–∞—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–¥–∞–≤–µ—Ü
        - –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ
        - –ë–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ –∏ —è–∑—ã–∫–µ
        
        –≠—Ç–æ –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–æ–¥–∞–≤–µ—Ü
        –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Amazon marketplace.
        """
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Amazon Marketplace Participation API")
        print("   üìù –ß—Ç–æ —ç—Ç–æ: –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö Amazon")
        print("   üéØ –¶–µ–ª—å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞ –∫–∞–∫–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–¥–∞–≤–µ—Ü")
        print("   üìä –û–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: —Å–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫, –≤–∞–ª—é—Ç—ã, —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è")
        
        endpoint = "/sellers/v1/marketplaceParticipations"
        print(f"   üåê Endpoint: {endpoint}")
        print("   üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference")
        
        response = self.make_api_request(endpoint)
        
        if response is not None:
            print("‚úÖ Marketplace Participation API - —É—Å–ø–µ—à–Ω–æ!")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
            payload = response.get('payload', [])
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ marketplace –ø–ª–æ—â–∞–¥–æ–∫: {len(payload)}")
            
            if len(payload) == 0:
                print("   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ - –≤–æ–∑–º–æ–∂–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return True  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—ç API —Ä–∞–±–æ—Ç–∞–µ—Ç
            
            for i, marketplace in enumerate(payload, 1):
                market = marketplace.get('marketplace', {})
                participation = marketplace.get('participation', {})
                store_name = marketplace.get('storeName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                
                print(f"   üì¶ Marketplace #{i}:")
                print(f"      üè™ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {store_name}")
                print(f"      üåç –ü–ª–æ—â–∞–¥–∫–∞: {market.get('name', 'N/A')} ({market.get('id', 'N/A')})")
                print(f"      üá∫üá∏ –°—Ç—Ä–∞–Ω–∞: {market.get('countryCode', 'N/A')}")
                print(f"      üí∞ –í–∞–ª—é—Ç–∞: {market.get('defaultCurrencyCode', 'N/A')}")
                print(f"      üó£Ô∏è  –Ø–∑—ã–∫: {market.get('defaultLanguageCode', 'N/A')}")
                print(f"      üåê –î–æ–º–µ–Ω: {market.get('domainName', 'N/A')}")
                print(f"      ‚úÖ –£—á–∞—Å—Ç–∏–µ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ: {'–î–∞' if participation.get('isParticipating') else '–ù–µ—Ç'}")
                print(f"      ‚ö†Ô∏è  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: {'–î–∞' if participation.get('hasSuspendedListings') else '–ù–µ—Ç'}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
                if participation.get('isParticipating'):
                    print("      üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ —ç—Ç–æ–π –ø–ª–æ—â–∞–¥–∫–µ")
                if participation.get('hasSuspendedListings'):
                    print("      ‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏!")
                
            return True
        else:
            print("‚ùå Marketplace Participation API - –æ—à–∏–±–∫–∞!")
            print("   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("      - –ù–µ–≤–µ—Ä–Ω—ã–µ credentials")
            print("      - –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API")
            print("      - –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è SP-API")
            return False
    
    def test_fba_inventory(self) -> bool:
        """
        –¢–µ—Å—Ç: FBA Inventory Summaries API
        
        –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
        - –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Amazon (FBA - Fulfillment by Amazon)
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
        - –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω—ã–µ, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –Ω–∞ –ø—É—Ç–∏ –∏ —Ç.–¥.)
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É marketplace
        
        FBA - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å Amazon, –≥–¥–µ –æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã.
        –≠—Ç–æ—Ç API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ —É –≤–∞—Å –ª–µ–∂–∏—Ç –Ω–∞ –∏—Ö —Å–∫–ª–∞–¥–∞—Ö.
        """
        print("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º Amazon FBA Inventory API")
        print("   üìù –ß—Ç–æ —ç—Ç–æ: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Amazon")
        print("   üéØ –¶–µ–ª—å: —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –ª–µ–∂–∏—Ç –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö FBA")
        print("   üìä –û–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, —Å—Ç–∞—Ç—É—Å—ã")
        print("   üí° FBA = Fulfillment by Amazon (—Å–∫–ª–∞–¥—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Amazon)")
        
        endpoint = "/fba/inventory/v1/summaries"
        params = {
            'granularityType': 'Marketplace',
            'granularityId': 'ATVPDKIKX0DER',
            'marketplaceIds': ['ATVPDKIKX0DER']
        }
        
        print(f"   üåê Endpoint: {endpoint}")
        print("   üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developer-docs.amazon.com/sp-api/docs/fba-inventory-api-v1-reference")
        print(f"   üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
        print(f"      - –¢–∏–ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {params['granularityType']} (–ø–æ –ø–ª–æ—â–∞–¥–∫–µ)")
        print(f"      - Marketplace ID: {params['granularityId']} (–°–®–ê - amazon.com)")
        print(f"      - –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–ª–æ—â–∞–¥–∫–∏: {params['marketplaceIds']}")
        
        response = self.make_api_request(endpoint, params=params)
        
        if response is not None:
            print("‚úÖ FBA Inventory API - —É—Å–ø–µ—à–Ω–æ!")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
            payload = response.get('payload', {})
            granularity = payload.get('granularity', {})
            inventory_summaries = payload.get('inventorySummaries', [])
            
            print(f"   üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ:")
            print(f"      - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: {granularity.get('granularityType', 'N/A')}")
            print(f"      - Marketplace: {granularity.get('granularityId', 'N/A')}")
            
            print(f"   üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {len(inventory_summaries)}")
            
            if len(inventory_summaries) == 0:
                print("   ‚ÑπÔ∏è  –í sandbox —Ä–µ–∂–∏–º–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç–æ–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                print("   ‚ÑπÔ∏è  –í —Ä–µ–∞–ª—å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Amazon")
                print("   üí° –ß—Ç–æ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:")
                print("      - ASIN –∫–æ–¥—ã —Ç–æ–≤–∞—Ä–æ–≤")
                print("      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö") 
                print("      - –°—Ç–∞—Ç—É—Å—ã —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ, –Ω–∞ –ø—É—Ç–∏)")
                print("      - SKU –∫–æ–¥—ã –ø—Ä–æ–¥–∞–≤—Ü–∞")
                print("      - –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                for i, item in enumerate(inventory_summaries, 1):
                    print(f"   üì¶ –¢–æ–≤–∞—Ä #{i}:")
                    print(f"      - ASIN: {item.get('asin', 'N/A')} (Amazon —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID)")
                    print(f"      - FNSKU: {item.get('fnSku', 'N/A')} (Fulfillment Network SKU)")
                    print(f"      - –°–µ–ª–ª–µ—Ä SKU: {item.get('sellerSku', 'N/A')} (–≤–∞—à –∞—Ä—Ç–∏–∫—É–ª)")
                    print(f"      - –ù–∞–∑–≤–∞–Ω–∏–µ: {item.get('productName', 'N/A')}")
                    
                    total_quantity = item.get('totalQuantity', 0)
                    print(f"      - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç.")
                    
                    if 'inventoryDetails' in item:
                        details = item['inventoryDetails']
                        print(f"      - –î–µ—Ç–∞–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:")
                        fulfillable = details.get('fulfillableQuantity', 0)
                        inbound = details.get('inboundWorkingQuantity', 0) 
                        inbound_shipped = details.get('inboundShippedQuantity', 0)
                        reserved = details.get('reservedQuantity', 0)
                        
                        print(f"        * –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {fulfillable} —à—Ç.")
                        print(f"        * –í –ø—É—Ç–∏ (–æ–±—Ä–∞–±–æ—Ç–∫–∞): {inbound} —à—Ç.")
                        print(f"        * –í –ø—É—Ç–∏ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ): {inbound_shipped} —à—Ç.")
                        print(f"        * –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {reserved} —à—Ç.")
                        
                        if fulfillable > 0:
                            print(f"        ‚úÖ –¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!")
                        else:
                            print(f"        ‚ö†Ô∏è  –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                
            print("   üí° –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç —Ç–µ—Å—Ç:")
            print("      - API —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
            print("      - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FBA —Å–∏—Å—Ç–µ–º–µ Amazon —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            print("      - –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö")
                
            return True
        else:
            print("‚ùå FBA Inventory API - –æ—à–∏–±–∫–∞!")
            print("   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("      - –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞")
            print("      - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ FBA API")
            print("      - –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FBA")
            return False


class ShopifyClient:
    """Shopify API Client with detailed logging"""
    
    def __init__(self):
        self.shop_domain = os.getenv('SHOPIFY_SHOP_DOMAIN')
        self.access_token = os.getenv('SHOPIFY_ACCESS_TOKEN')
        self.api_version = os.getenv('SHOPIFY_API_VERSION', '2023-10')
        self.base_url = f"https://{self.shop_domain}.myshopify.com/admin/api/{self.api_version}"
    
    def make_api_request(self, endpoint: str, method: str = 'GET', data: Dict = None) -> Optional[Dict]:
        """Make authenticated API request to Shopify"""
        headers = {
            'X-Shopify-Access-Token': self.access_token,
            'Content-Type': 'application/json'
        }
        
        url = f"{self.base_url}{endpoint}"
        
        try:
            if method.upper() == 'GET':
                response = requests.get(url, headers=headers)
            elif method.upper() == 'POST':
                response = requests.post(url, headers=headers, json=data)
            elif method.upper() == 'PUT':
                response = requests.put(url, headers=headers, json=data)
            else:
                print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
                return None
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            print(f"Shopify API –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None
    
    def test_products_endpoint(self) -> bool:
        """Test the products endpoint with detailed logging"""
        print("üõçÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º Shopify Products API")
        print("   üìù –ß—Ç–æ —ç—Ç–æ: –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Shopify –º–∞–≥–∞–∑–∏–Ω–∞")
        
        endpoint = "/products.json?limit=5"
        response = self.make_api_request(endpoint)
        
        if response is not None:
            products = response.get('products', [])
            print(f"‚úÖ Products endpoint test successful")
            print(f"   üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            for i, product in enumerate(products, 1):
                print(f"   üõçÔ∏è  –¢–æ–≤–∞—Ä #{i}: {product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"      - ID: {product.get('id')}")
                print(f"      - –°—Ç–∞—Ç—É—Å: {product.get('status', 'unknown')}")
                print(f"      - –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(product.get('variants', []))}")
            
            return True
        else:
            print("‚ùå Products endpoint test failed")
            return False
    
    def test_orders_endpoint(self) -> bool:
        """Test the orders endpoint with detailed logging"""
        print("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º Shopify Orders API")
        print("   üìù –ß—Ç–æ —ç—Ç–æ: –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Shopify –º–∞–≥–∞–∑–∏–Ω–∞")
        
        endpoint = "/orders.json?limit=5"
        response = self.make_api_request(endpoint)
        
        if response is not None:
            orders = response.get('orders', [])
            print(f"‚úÖ Orders endpoint test successful")
            print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
            
            if len(orders) == 0:
                print("   ‚ÑπÔ∏è  –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
            else:
                for i, order in enumerate(orders, 1):
                    print(f"   üìã –ó–∞–∫–∞–∑ #{i}: #{order.get('order_number', order.get('id'))}")
                    print(f"      - –°—É–º–º–∞: {order.get('total_price', '0')} {order.get('currency', 'USD')}")
                    print(f"      - –°—Ç–∞—Ç—É—Å: {order.get('financial_status', 'unknown')}")
                    print(f"      - –¢–æ–≤–∞—Ä–æ–≤: {len(order.get('line_items', []))}")
            
            return True
        else:
            print("‚ùå Orders endpoint test failed")
            return False


class IntegrationTester:
    """Main integration tester class with detailed explanations"""
    
    def __init__(self):
        self.amazon_client = AmazonSandboxClient()
        self.shopify_client = ShopifyClient()
    
    def test_environment_variables(self) -> bool:
        """Test if all required environment variables are set"""
        print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        print("   üìÅ –§–∞–π–ª: .env")
        
        required_vars = [
            'AMAZON_CLIENT_ID',
            'AMAZON_CLIENT_SECRET', 
            'AMAZON_REFRESH_TOKEN',
            'SHOPIFY_SHOP_DOMAIN',
            'SHOPIFY_ACCESS_TOKEN'
        ]
        
        missing_vars = []
        found_vars = []
        
        for var in required_vars:
            value = os.getenv(var)
            if not value:
                missing_vars.append(var)
            else:
                found_vars.append(var)
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if 'TOKEN' in var or 'SECRET' in var:
                    display_value = f"{value[:15]}..." if len(value) > 15 else value
                else:
                    display_value = value
                print(f"   ‚úÖ {var}: {display_value}")
        
        if missing_vars:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
            return False
        else:
            print("   ‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return True
    
    def test_amazon_sandbox(self) -> bool:
        """Test Amazon Sandbox API connectivity with detailed explanations"""
        print("\\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Amazon Sandbox API...")
        print("=" * 60)
        print("üìñ –û Amazon SP-API Sandbox:")
        print("   - –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
        print("   - –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Amazon Selling Partner API")
        print("   - –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏")
        print("   - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ")
        print("=" * 60)
        
        # Test token generation
        print("\\nüîê –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        if not self.amazon_client.get_access_token():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Amazon access token")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials –≤ .env —Ñ–∞–π–ª–µ")
            return False
        
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        
        # Test various endpoints
        print("\\nüß™ –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints")
        tests = [
            ("Marketplace Participation", self.amazon_client.test_marketplace_participation),
            ("FBA Inventory", self.amazon_client.test_fba_inventory)
        ]
        
        results = []
        for test_name, test_func in tests:
            print(f"\\n--- {test_name} ---")
            try:
                result = test_func()
                results.append(result)
                if result:
                    print(f"‚úÖ {test_name} - –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå {test_name} - –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            except Exception as e:
                print(f"‚ùå {test_name} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                results.append(False)
        
        success = all(results)
        
        print("\\n" + "=" * 60)
        if success:
            print("üéâ –í—Å–µ Amazon sandbox —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:")
            print("   - –í–∞—à–∏ Amazon credentials —Ä–∞–±–æ—Ç–∞—é—Ç") 
            print("   - API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("   - –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ Amazon sandbox —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials –≤ Amazon Developer Console")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ sandbox")
        
        return success
    
    def test_shopify_api(self) -> bool:
        """Test Shopify API connectivity"""
        print("\\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Shopify API...")
        print("=" * 60)
        print("üìñ –û Shopify API:")
        print("   - –†–µ–∞–ª—å–Ω—ã–π API –≤–∞—à–µ–≥–æ Shopify –º–∞–≥–∞–∑–∏–Ω–∞")
        print("   - –î–æ—Å—Ç—É–ø –∫ —Ç–æ–≤–∞—Ä–∞–º, –∑–∞–∫–∞–∑–∞–º, –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –¥—Ä—É–≥–∏–º –¥–∞–Ω–Ω—ã–º")
        print("   - –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Private App –∏–ª–∏ Custom App")
        print("=" * 60)
        
        # Test various endpoints
        tests = [
            ("Products API", self.shopify_client.test_products_endpoint),
            ("Orders API", self.shopify_client.test_orders_endpoint)
        ]
        
        results = []
        for test_name, test_func in tests:
            print(f"\\n--- {test_name} ---")
            try:
                result = test_func()
                results.append(result)
            except Exception as e:
                print(f"‚ùå {test_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
                results.append(False)
        
        success = all(results)
        
        print("\\n" + "=" * 60) 
        if success:
            print("‚úÖ –í—Å–µ Shopify API —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ Shopify API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return success
    
    def run_full_integration_test(self) -> bool:
        """Run complete integration test suite with detailed explanations"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
        print("=" * 60)
        print("üìã –ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   2. –¢–µ—Å—Ç Amazon SP-API Sandbox")
        print("   3. –¢–µ—Å—Ç Shopify API")
        print("   4. –û–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ")
        print("=" * 60)
        
        # Test environment setup
        print("\\nüìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.test_environment_variables():
            print("\\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
            return False
        
        # Test Amazon API
        amazon_success = self.test_amazon_sandbox()
        
        # Test Shopify API (only if environment variables are set)
        shopify_success = True
        if os.getenv('SHOPIFY_SHOP_DOMAIN') and os.getenv('SHOPIFY_ACCESS_TOKEN'):
            shopify_success = self.test_shopify_api()
        else:
            print("\\n‚ö†Ô∏è  Shopify credentials –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Shopify —Ç–µ—Å—Ç—ã")
        
        # Overall result
        overall_success = amazon_success and shopify_success
        
        print("\\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        print(f"üîß –û–∫—Ä—É–∂–µ–Ω–∏–µ: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        print(f"üöÄ Amazon SP-API: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if amazon_success else '‚ùå –û—à–∏–±–∫–∏'}")
        print(f"üõçÔ∏è  Shopify API: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if shopify_success else '‚ùå –û—à–∏–±–∫–∏'}")
        
        if overall_success:
            print("\\nüéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("\\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            print("   2. –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")  
            print("   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–µ–±—Ö—É–∫–æ–≤")
            print("   4. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        else:
            print("\\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            print("\\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            if not amazon_success:
                print("   - –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Amazon API")
            if not shopify_success:
                print("   - –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Shopify API")
            print("   - –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        print("=" * 60)
        
        return overall_success


def test_amazon_sandbox():
    """Simple Amazon sandbox test function (for backward compatibility)"""
    print("üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Amazon Sandbox —Ç–µ—Å—Ç–∞...")
    
    # Check for required environment variables
    client_id = os.getenv('AMAZON_CLIENT_ID')
    client_secret = os.getenv('AMAZON_CLIENT_SECRET') 
    refresh_token = os.getenv('AMAZON_REFRESH_TOKEN')
    
    if not all([client_id, client_secret, refresh_token]):
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ Amazon credentials –≤ .env —Ñ–∞–π–ª–µ")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ: AMAZON_CLIENT_ID, AMAZON_CLIENT_SECRET, AMAZON_REFRESH_TOKEN")
        return False
    
    # Initialize and test
    amazon_client = AmazonSandboxClient()
    
    # Get access token
    if not amazon_client.get_access_token():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
        return False
    
    print("‚úÖ Access token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # Test sandbox endpoint
    success = amazon_client.test_marketplace_participation()
    
    if success:
        print("üéâ Amazon sandbox —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå Amazon sandbox —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
    
    return success


def main():
    """Main function to run integration tests"""
    # Initialize the integration tester
    tester = IntegrationTester()
    
    # Run full test suite
    success = tester.run_full_integration_test()
    
    # Exit with appropriate code
    exit(0 if success else 1)


if __name__ == "__main__":
    main()