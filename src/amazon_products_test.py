# -*- coding: utf-8 -*-
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Amazon Sandbox
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ Amazon
"""
import os
import json
import datetime
from test_integration import AmazonSandboxClient
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

class AmazonProductsFinder:
    def __init__(self):
        self.client = AmazonSandboxClient()
        self.found_products = []
        self.working_endpoints = []
        self.failed_endpoints = []

    def authenticate(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –í AMAZON SP-API")
        print("=" * 50)
        
        if not self.client.get_access_token():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω - —Ç–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
            
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n")
        return True

    def test_catalog_search_variations(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"""
        print("üîç –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Amazon")
        print("=" * 50)
        
        # –†–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Catalog API
        catalog_tests = [
            {
                'name': 'Catalog 2022 - Simple Search',
                'endpoint': '/catalog/2022-04-01/items',
                'params': {'keywords': 'book', 'marketplaceIds': 'ATVPDKIKX0DER'}
            },
            {
                'name': 'Catalog 2022 - Electronics',
                'endpoint': '/catalog/2022-04-01/items',
                'params': {'keywords': 'phone', 'marketplaceIds': 'ATVPDKIKX0DER'}
            },
            {
                'name': 'Catalog 2022 - Minimal Params',
                'endpoint': '/catalog/2022-04-01/items',
                'params': {'marketplaceIds': 'ATVPDKIKX0DER'}
            },
            {
                'name': 'Catalog 2020 - Legacy API',
                'endpoint': '/catalog/v0/items',
                'params': {'Query': 'book', 'MarketplaceId': 'ATVPDKIKX0DER'}
            },
            {
                'name': 'Catalog by ASIN - Test ASIN',
                'endpoint': '/catalog/2022-04-01/items/B08N5WRWNW',
                'params': {'marketplaceIds': 'ATVPDKIKX0DER', 'includedData': 'summaries'}
            },
            {
                'name': 'Catalog by ASIN - Another Test',
                'endpoint': '/catalog/2022-04-01/items/B07VGRJDFY',
                'params': {'marketplaceIds': 'ATVPDKIKX0DER'}
            }
        ]
        
        for test in catalog_tests:
            print(f"\nüß™ {test['name']}")
            print(f"   üìç Endpoint: {test['endpoint']}")
            print(f"   üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test['params']}")
            
            response = self.client.make_api_request(test['endpoint'], params=test['params'])
            
            if response and response.get('items'):
                items = response['items']
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}")
                self.working_endpoints.append(test['name'])
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
                for i, item in enumerate(items[:3]):
                    asin = item.get('asin', 'N/A')
                    summaries = item.get('summaries', [])
                    title = summaries[0].get('itemName', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') if summaries else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                    print(f"      üì¶ {i+1}. ASIN: {asin} - {title}")
                    
                self.found_products.extend(items[:5])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 5
                
            elif response and 'asin' in response:  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {response.get('asin')}")
                summaries = response.get('summaries', [])
                if summaries:
                    title = summaries[0].get('itemName', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                self.working_endpoints.append(test['name'])
                self.found_products.append(response)
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.failed_endpoints.append(test['name'])

    def test_listings_variations(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        print("\nüìã –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞")
        print("=" * 50)
        
        # –†–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –ª–∏—Å—Ç–∏–Ω–≥–∞–º
        listings_tests = [
            {
                'name': 'Listings 2021 - All Items',
                'endpoint': '/listings/2021-08-01/items',
                'params': {'sellerId': 'A2EUQ1WTGCTBG2', 'marketplaceIds': 'ATVPDKIKX0DER'}
            },
            {
                'name': 'Listings 2021 - Without Seller ID',
                'endpoint': '/listings/2021-08-01/items',
                'params': {'marketplaceIds': 'ATVPDKIKX0DER'}
            },
            {
                'name': 'Listings 2020 - Legacy',
                'endpoint': '/listings/2020-09-01/items',
                'params': {'sellerId': 'A2EUQ1WTGCTBG2', 'marketplaceIds': 'ATVPDKIKX0DER'}
            },
            {
                'name': 'Merchant Listings',
                'endpoint': '/mfn/v0/eligibleShippingServices',
                'params': {'marketplaceIds': ['ATVPDKIKX0DER']}
            }
        ]
        
        for test in listings_tests:
            print(f"\nüß™ {test['name']}")
            print(f"   üìç Endpoint: {test['endpoint']}")
            
            response = self.client.make_api_request(test['endpoint'], params=test['params'])
            
            if response:
                if 'items' in response and response['items']:
                    items = response['items']
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤: {len(items)}")
                    self.working_endpoints.append(test['name'])
                    
                    for i, item in enumerate(items[:3]):
                        sku = item.get('sku', 'N/A')
                        asin = item.get('asin', 'N/A')
                        print(f"      üì¶ {i+1}. SKU: {sku}, ASIN: {asin}")
                        
                else:
                    print(f"   ‚ÑπÔ∏è  API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –Ω–µ—Ç (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è sandbox)")
                    self.working_endpoints.append(test['name'])
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
                self.failed_endpoints.append(test['name'])

    def test_orders_for_products(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º Orders API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö —á–µ—Ä–µ–∑ –∑–∞–∫–∞–∑—ã"""
        print("\nüìä –¢–ï–°–¢ 3: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Orders API")
        print("=" * 50)
        
        # –†–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        now = datetime.datetime.now()
        periods = [
            ('1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥', now - datetime.timedelta(days=1)),
            ('1 –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥', now - datetime.timedelta(days=7)),
            ('1 –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥', now - datetime.timedelta(days=30)),
            ('6 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥', now - datetime.timedelta(days=180)),
            ('1 –≥–æ–¥ –Ω–∞–∑–∞–¥', now - datetime.timedelta(days=365))
        ]
        
        for period_name, start_date in periods:
            print(f"\nüß™ –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤: {period_name}")
            
            orders_params = {
                'MarketplaceIds': ['ATVPDKIKX0DER'],
                'CreatedAfter': start_date.strftime('%Y-%m-%dT%H:%M:%SZ')
            }
            
            print(f"   üìÖ –° –¥–∞—Ç—ã: {start_date.strftime('%Y-%m-%d %H:%M:%S')}")
            
            response = self.client.make_api_request('/orders/v0/orders', params=orders_params)
            
            if response and response.get('payload', {}).get('Orders'):
                orders = response['payload']['Orders']
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
                self.working_endpoints.append(f"Orders - {period_name}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–æ–≤
                for order in orders[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞
                    order_id = order.get('AmazonOrderId', 'N/A')
                    print(f"   üìã –ó–∞–∫–∞–∑: {order_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
                    items_response = self.client.make_api_request(
                        f'/orders/v0/orders/{order_id}/orderItems'
                    )
                    
                    if items_response and items_response.get('payload', {}).get('OrderItems'):
                        items = items_response['payload']['OrderItems']
                        print(f"      üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {len(items)}")
                        
                        for item in items[:2]:  # –ü–µ—Ä–≤—ã–µ 2 —Ç–æ–≤–∞—Ä–∞
                            asin = item.get('ASIN', 'N/A')
                            title = item.get('Title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            sku = item.get('SellerSKU', 'N/A')
                            print(f"         - ASIN: {asin}, SKU: {sku}")
                            print(f"         - –¢–æ–≤–∞—Ä: {title}")
                break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–∫–∞–∑—ã, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –¥—Ä—É–≥–∏–º –ø–µ—Ä–∏–æ–¥–∞–º
            else:
                print(f"   ‚ùå –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                self.failed_endpoints.append(f"Orders - {period_name}")

    def test_inventory_variations(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ inventory API"""
        print("\nüì¶ –¢–ï–°–¢ 4: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Inventory APIs")
        print("=" * 50)
        
        inventory_tests = [
            {
                'name': 'FBA Inventory v1',
                'endpoint': '/fba/inventory/v1/summaries',
                'params': {
                    'granularityType': 'Marketplace',
                    'granularityId': 'ATVPDKIKX0DER',
                    'marketplaceIds': ['ATVPDKIKX0DER']
                }
            },
            {
                'name': 'MFN Inventory',
                'endpoint': '/inventory/v1/summaries',
                'params': {'granularityType': 'Marketplace', 'granularityId': 'ATVPDKIKX0DER'}
            },
            {
                'name': 'Inventory Details',
                'endpoint': '/fba/inventory/v1/summaries',
                'params': {
                    'details': True,
                    'granularityType': 'Marketplace', 
                    'granularityId': 'ATVPDKIKX0DER'
                }
            }
        ]
        
        for test in inventory_tests:
            print(f"\nüß™ {test['name']}")
            print(f"   üìç Endpoint: {test['endpoint']}")
            
            response = self.client.make_api_request(test['endpoint'], params=test['params'])
            
            if response and response.get('payload', {}).get('inventorySummaries'):
                items = response['payload']['inventorySummaries']
                if items:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {len(items)}")
                    self.working_endpoints.append(test['name'])
                    
                    for i, item in enumerate(items[:3]):
                        asin = item.get('asin', 'N/A')
                        sku = item.get('sellerSku', 'N/A')
                        quantity = item.get('totalQuantity', 0)
                        print(f"      üì¶ {i+1}. ASIN: {asin}, SKU: {sku}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
                else:
                    print(f"   ‚ÑπÔ∏è  Inventory API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç")
                    self.working_endpoints.append(test['name'])
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.failed_endpoints.append(test['name'])

    def test_reports_api(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º Reports API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
        print("\nüìà –¢–ï–°–¢ 5: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Reports API")
        print("=" * 50)
        
        reports_tests = [
            {
                'name': 'Inventory Report',
                'reportType': 'GET_MERCHANT_LISTINGS_ALL_DATA',
                'description': '–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∏–Ω–≥–∞–º –ø—Ä–æ–¥–∞–≤—Ü–∞'
            },
            {
                'name': 'FBA Inventory Report',
                'reportType': 'GET_FBA_INVENTORY_AGED_REPORT',
                'description': '–û—Ç—á–µ—Ç –ø–æ FBA –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é'
            },
            {
                'name': 'Active Listings Report',
                'reportType': 'GET_MERCHANT_LISTINGS_DATA',
                'description': '–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏'
            }
        ]
        
        for test in reports_tests:
            print(f"\nüß™ {test['name']} - {test['description']}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            create_params = {
                'reportType': test['reportType'],
                'marketplaceIds': ['ATVPDKIKX0DER']
            }
            
            response = self.client.make_api_request('/reports/2021-06-30/reports', 
                                                 method='POST', data=create_params)
            
            if response and response.get('reportId'):
                report_id = response['reportId']
                print(f"   ‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_id}")
                print(f"   ‚ÑπÔ∏è  –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞")
                self.working_endpoints.append(test['name'])
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç")
                self.failed_endpoints.append(test['name'])

    def test_feeds_api(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º Feeds API"""
        print("\nüì§ –¢–ï–°–¢ 6: Feeds API (–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤)")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∏–¥–æ–≤
        response = self.client.make_api_request('/feeds/2021-06-30/documents')
        
        if response:
            print("   ‚úÖ Feeds API –¥–æ—Å—Ç—É–ø–µ–Ω")
            print("   üí° –≠—Ç–æ—Ç API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Amazon")
            self.working_endpoints.append("Feeds API")
        else:
            print("   ‚ùå Feeds API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            self.failed_endpoints.append("Feeds API")

    def show_summary(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢: –ü–û–ò–°–ö –¢–û–í–ê–†–û–í AMAZON")
        print("=" * 60)
        
        print(f"\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï API ({len(self.working_endpoints)}):")
        for endpoint in self.working_endpoints:
            print(f"   ‚úÖ {endpoint}")
        
        print(f"\n‚ùå –ù–ï –†–ê–ë–û–¢–ê–Æ–©–ò–ï API ({len(self.failed_endpoints)}):")
        for endpoint in self.failed_endpoints:
            print(f"   ‚ùå {endpoint}")
        
        print(f"\nüì¶ –ù–ê–ô–î–ï–ù–û –¢–û–í–ê–†–û–í: {len(self.found_products)}")
        
        if self.found_products:
            print("\nüîç –î–ï–¢–ê–õ–ò –ù–ê–ô–î–ï–ù–ù–´–• –¢–û–í–ê–†–û–í:")
            for i, product in enumerate(self.found_products[:5], 1):
                asin = product.get('asin', 'N/A')
                print(f"\n   üì¶ –¢–æ–≤–∞—Ä #{i}:")
                print(f"      üè∑Ô∏è  ASIN: {asin}")
                
                summaries = product.get('summaries', [])
                if summaries:
                    summary = summaries[0]
                    title = summary.get('itemName', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    brand = summary.get('brand', '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞')
                    print(f"      üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                    print(f"      üè¢ –ë—Ä–µ–Ω–¥: {brand}")
                
                identifiers = product.get('identifiers', {})
                if identifiers:
                    upc = identifiers.get('upcCodes', [])
                    if upc:
                        print(f"      üî¢ UPC: {upc[0]}")
        else:
            print("   ‚ÑπÔ∏è  –í sandbox —Ä–µ–∂–∏–º–µ —Ç–æ–≤–∞—Ä—ã –æ–±—ã—á–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        print("\nüí° –í–´–í–û–î–´:")
        print("=" * 30)
        
        if len(self.working_endpoints) > len(self.failed_endpoints):
            print("‚úÖ Amazon SP-API –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç!")
        else:
            print("‚ö†Ô∏è  –ú–Ω–æ–≥–∏–µ Amazon API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ sandbox")
        
        print("\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. Sandbox –æ–≥—Ä–∞–Ω–∏—á–µ–Ω - –º–Ω–æ–≥–∏–µ API —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ production")
        print("   2. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ production credentials")
        print("   3. –†–∞–±–æ—Ç–∞—é—â–∏–µ API –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("   4. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Ñ—É–Ω–∫—Ü–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üîç AMAZON PRODUCTS FINDER - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    print("üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã Amazon –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏")
    print("=" * 70)
    
    finder = AmazonProductsFinder()
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if not finder.authenticate():
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    finder.test_catalog_search_variations()
    finder.test_listings_variations()
    finder.test_orders_for_products()
    finder.test_inventory_variations()
    finder.test_reports_api()
    finder.test_feeds_api()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    finder.show_summary()

if __name__ == "__main__":
    main()