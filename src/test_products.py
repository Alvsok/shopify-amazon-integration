# -*- coding: utf-8 -*-
import os
from test_integration import AmazonSandboxClient, ShopifyClient
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞  
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

def test_amazon_products():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö Amazon"""
    print("üîç –¢–ï–°–¢: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Amazon Sandbox")
    print("=" * 60)
    
    client = AmazonSandboxClient()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    if not client.get_access_token():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return
    
    print("\nüì¶ 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ:")
    print("-" * 40)
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
    marketplace_response = client.make_api_request("/sellers/v1/marketplaceParticipations")
    if marketplace_response:
        payload = marketplace_response.get('payload', [])
        if payload:
            store = payload[0]
            market = store.get('marketplace', {})
            print(f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {store.get('storeName', 'N/A')}")
            print(f"üåç –ü–ª–æ—â–∞–¥–∫–∞: {market.get('name', 'N/A')} ({market.get('id', 'N/A')})")
            print(f"üí∞ –í–∞–ª—é—Ç–∞: {market.get('defaultCurrencyCode', 'N/A')}")
            print(f"üåê –î–æ–º–µ–Ω: {market.get('domainName', 'N/A')}")
    
    print("\nüìã 2. –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:")
    print("-" * 50)
    
    # 2. –ü–æ–ø—Ä–æ–±—É–µ–º Catalog API —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    catalog_endpoints = [
        {
            'name': 'Catalog Simple Search',
            'endpoint': '/catalog/2022-04-01/items',
            'params': {
                'keywords': 'book',
                'marketplaceIds': 'ATVPDKIKX0DER'
            }
        },
        {
            'name': 'Catalog by ASIN',
            'endpoint': '/catalog/2022-04-01/items/B08N5WRWNW',  # –ü—Ä–∏–º–µ—Ä ASIN
            'params': {
                'marketplaceIds': 'ATVPDKIKX0DER',
                'includedData': 'summaries'
            }
        }
    ]
    
    for test in catalog_endpoints:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test['name']}")
        print(f"   Endpoint: {test['endpoint']}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test['params']}")
        
        response = client.make_api_request(test['endpoint'], params=test['params'])
        if response:
            print("   ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!")
            if 'items' in response:
                items = response['items']
                print(f"   üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}")
                for i, item in enumerate(items[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"      {i+1}. ASIN: {item.get('asin', 'N/A')}")
            elif 'asin' in response:  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä
                print(f"   üì¶ ASIN: {response.get('asin', 'N/A')}")
                summaries = response.get('summaries', [])
                if summaries:
                    summary = summaries[0]
                    print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {summary.get('itemName', 'N/A')}")
                    print(f"   üè¢ –ë—Ä–µ–Ω–¥: {summary.get('brand', 'N/A')}")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    print("\nüìä 3. –ü–æ–ø—Ä–æ–±—É–µ–º Orders API:")
    print("-" * 30)
    
    # 3. Orders API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    import datetime
    
    # –î–∞—Ç–∞ –≥–æ–¥ –Ω–∞–∑–∞–¥
    year_ago = (datetime.datetime.now() - datetime.timedelta(days=365)).strftime('%Y-%m-%dT%H:%M:%SZ')
    
    orders_params = {
        'MarketplaceIds': ['ATVPDKIKX0DER'],
        'CreatedAfter': year_ago,
        'OrderStatuses': ['Pending', 'Unshipped', 'Shipped']
    }
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Orders API")
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {orders_params}")
    
    orders_response = client.make_api_request('/orders/v0/orders', params=orders_params)
    if orders_response:
        orders = orders_response.get('payload', {}).get('Orders', [])
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
        for i, order in enumerate(orders[:5]):  # –ü–µ—Ä–≤—ã–µ 5
            print(f"      {i+1}. Order ID: {order.get('AmazonOrderId', 'N/A')}")
            print(f"         –°—Ç–∞—Ç—É—Å: {order.get('OrderStatus', 'N/A')}")
            print(f"         –°—É–º–º–∞: {order.get('OrderTotal', {}).get('Amount', 'N/A')} {order.get('OrderTotal', {}).get('CurrencyCode', 'USD')}")
    else:
        print("   ‚ùå Orders API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ sandbox –∏–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")

def compare_shopify_amazon():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã Shopify —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ Amazon"""
    print("\n" + "=" * 60)
    print("üîÑ –°–†–ê–í–ù–ï–ù–ò–ï: –¢–æ–≤–∞—Ä—ã Shopify vs –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Amazon")
    print("=" * 60)
    
    # Shopify —Ç–æ–≤–∞—Ä—ã
    shopify = ShopifyClient()
    shopify_response = shopify.make_api_request('/products.json?limit=5')
    
    if shopify_response:
        products = shopify_response.get('products', [])
        print(f"\nüõçÔ∏è  Shopify —Ç–æ–≤–∞—Ä—ã ({len(products)} —à—Ç.):")
        print("-" * 40)
        
        for i, product in enumerate(products, 1):
            title = product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            product_id = product.get('id')
            variants = product.get('variants', [])
            
            print(f"{i}. üì¶ {title}")
            print(f"   ID: {product_id}")
            print(f"   –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(variants)}")
            
            if variants:
                variant = variants[0]
                price = variant.get('price', 'N/A')
                sku = variant.get('sku', 'N/A')
                inventory = variant.get('inventory_quantity', 0)
                
                print(f"   üí∞ –¶–µ–Ω–∞: ${price}")
                print(f"   üè∑Ô∏è  SKU: {sku}")
                print(f"   üìä –û—Å—Ç–∞—Ç–æ–∫: {inventory} —à—Ç.")
            
            print()
    
    print("üí° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print("-" * 30)
    print("‚úÖ –ß—Ç–æ –†–ê–ë–û–¢–ê–ï–¢ —Å–µ–π—á–∞—Å:")
    print("   - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ marketplace Amazon")
    print("   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞")  
    print("   - –î–æ—Å—Ç—É–ø –∫ FBA inventory API")
    print("   - –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Shopify —Ç–æ–≤–∞—Ä–∞–º")
    
    print("\nüöÄ –ß—Ç–æ –º–æ–∂–Ω–æ –†–ê–ó–†–ê–ë–û–¢–ê–¢–¨:")
    print("   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Shopify ‚Üí Amazon")
    print("   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤")
    print("   - –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –Ω–∞ Amazon")
    print("   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
    
    print("\n‚ö†Ô∏è  –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø Sandbox:")
    print("   - –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
    print("   - –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞")
    print("   - –ó–∞–∫–∞–∑—ã –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å")
    print("   - –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API —Ç—Ä–µ–±—É—é—Ç production")

if __name__ == "__main__":
    test_amazon_products()
    compare_shopify_amazon()