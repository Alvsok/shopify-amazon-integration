# -*- coding: utf-8 -*-
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ Shopify –≤ Amazon
–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä ID: 9160927608983 –≤ Shopify –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –≤ Amazon
"""
import os
import json
import xml.etree.ElementTree as ET
from test_integration import AmazonSandboxClient, ShopifyClient
from dotenv import load_dotenv
import base64
import uuid
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

class ShopifyToAmazonCreator:
    def __init__(self):
        self.shopify_client = ShopifyClient()
        self.amazon_client = AmazonSandboxClient()
        self.target_product_id = "9160927608983"  # Bosch Aerotwin A950S
    
    def get_shopify_product_details(self):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ Shopify"""
        print("üîç –≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ Shopify")
        print("=" * 50)
        
        print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Ç–æ–≤–∞—Ä ID: {self.target_product_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ ID
        endpoint = f"/products/{self.target_product_id}.json"
        print(f"üì° –ó–∞–ø—Ä–æ—Å: GET {endpoint}")
        
        response = self.shopify_client.make_api_request(endpoint)
        
        if not response or 'product' not in response:
            print("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Shopify")
            return None
        
        product = response['product']
        
        print("‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ Shopify!")
        print("\nüì¶ –î–ï–¢–ê–õ–ò –¢–û–í–ê–†–ê:")
        print("-" * 30)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        title = product.get('title', '')
        vendor = product.get('vendor', '')
        product_type = product.get('product_type', '')
        description = product.get('body_html', '').replace('<p>', '').replace('</p>', '').replace('<br>', '\n')
        tags = product.get('tags', '')
        
        print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
        print(f"üè¢ –ë—Ä–µ–Ω–¥: {vendor}")
        print(f"üìÇ –¢–∏–ø: {product_type}")
        print(f"üè∑Ô∏è  –¢–µ–≥–∏: {tags}")
        print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}...")
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞
        variants = product.get('variants', [])
        print(f"\nüî¢ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞: {len(variants)}")
        
        variant_details = []
        for i, variant in enumerate(variants, 1):
            sku = variant.get('sku', '')
            price = variant.get('price', '0.00')
            weight = variant.get('weight', 0)
            inventory_qty = variant.get('inventory_quantity', 0)
            barcode = variant.get('barcode', '')
            
            variant_info = {
                'sku': sku,
                'price': price,
                'weight': weight,
                'inventory_quantity': inventory_qty,
                'barcode': barcode,
                'title': variant.get('title', 'Default Title')
            }
            variant_details.append(variant_info)
            
            print(f"   üì¶ –í–∞—Ä–∏–∞–Ω—Ç {i}:")
            print(f"      üè∑Ô∏è  SKU: {sku}")
            print(f"      üí∞ –¶–µ–Ω–∞: ${price}")
            print(f"      ‚öñÔ∏è  –í–µ—Å: {weight}g")
            print(f"      üìä –û—Å—Ç–∞—Ç–æ–∫: {inventory_qty} —à—Ç.")
            if barcode:
                print(f"      üî¢ –®—Ç—Ä–∏—Ö–∫–æ–¥: {barcode}")
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = product.get('images', [])
        print(f"\nüñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
        
        image_details = []
        for i, image in enumerate(images, 1):
            image_info = {
                'src': image.get('src', ''),
                'alt': image.get('alt', ''),
                'position': image.get('position', i)
            }
            image_details.append(image_info)
            print(f"   üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}: {image.get('src', '')[:60]}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        product_data = {
            'shopify_id': product.get('id'),
            'title': title,
            'vendor': vendor,
            'product_type': product_type,
            'description': description,
            'tags': tags,
            'variants': variant_details,
            'images': image_details,
            'handle': product.get('handle', ''),
            'created_at': product.get('created_at', ''),
            'updated_at': product.get('updated_at', '')
        }
        
        print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")
        return product_data
    
    def create_amazon_listing_xml(self, product_data):
        """–°–æ–∑–¥–∞–µ–º XML –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ Amazon —á–µ—Ä–µ–∑ Feeds API"""
        print("\nüèóÔ∏è  –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ Amazon Listing XML")
        print("=" * 50)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–æ–±—ã—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π)
        main_variant = product_data['variants'][0] if product_data['variants'] else {}
        sku = main_variant.get('sku', f"SHOPIFY_{product_data['shopify_id']}")
        
        print(f"üìù –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç–∏–Ω–≥ –¥–ª—è SKU: {sku}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
        product_type = product_data.get('product_type', '').lower()
        if 'wiper' in product_type or 'automotive' in product_data.get('tags', '').lower():
            category = 'Automotive'
            subcategory = 'Replacement Parts'
        else:
            category = 'Tools & Home Improvement'
            subcategory = 'Automotive'
        
        print(f"üìÇ Amazon –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category} ‚Üí {subcategory}")
        
        # –°–æ–∑–¥–∞–µ–º XML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è Amazon Product Feed
        envelope = ET.Element("AmazonEnvelope")
        envelope.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
        envelope.set("xsi:noNamespaceSchemaLocation", "amzn-envelope.xsd")
        
        # Header
        header = ET.SubElement(envelope, "Header")
        ET.SubElement(header, "DocumentVersion").text = "1.01"
        ET.SubElement(header, "MerchantIdentifier").text = "MERCHANT_ID"
        
        # Message Type
        ET.SubElement(envelope, "MessageType").text = "Product"
        ET.SubElement(envelope, "PurgeAndReplace").text = "false"
        
        # Message
        message = ET.SubElement(envelope, "Message")
        ET.SubElement(message, "MessageID").text = "1"
        ET.SubElement(message, "OperationType").text = "Update"
        
        # Product
        product = ET.SubElement(message, "Product")
        ET.SubElement(product, "SKU").text = sku
        
        # Standard Product ID (–µ—Å–ª–∏ –µ—Å—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥)
        if main_variant.get('barcode'):
            standard_id = ET.SubElement(product, "StandardProductID")
            ET.SubElement(standard_id, "Type").text = "UPC"
            ET.SubElement(standard_id, "Value").text = main_variant['barcode']
        
        # Product Tax Code (–¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π)
        ET.SubElement(product, "ProductTaxCode").text = "A_GEN_NOTAX"
        
        # Launch Date
        ET.SubElement(product, "LaunchDate").text = datetime.now().strftime("%Y-%m-%d")
        
        # Descriptive Data
        desc_data = ET.SubElement(product, "DescriptiveData")
        ET.SubElement(desc_data, "Title").text = product_data['title']
        ET.SubElement(desc_data, "Brand").text = product_data.get('vendor', 'Generic')
        ET.SubElement(desc_data, "Description").text = product_data.get('description', product_data['title'])
        ET.SubElement(desc_data, "Manufacturer").text = product_data.get('vendor', 'Generic')
        
        # Bullet Points (–∏–∑ —Ç–µ–≥–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è)
        bullet_point = ET.SubElement(desc_data, "BulletPoint")
        bullet_point.text = f"Compatible with various vehicle models"
        
        if product_data.get('tags'):
            tags_list = product_data['tags'].split(',')[:4]  # –ú–∞–∫—Å–∏–º—É–º 5 bullet points
            for i, tag in enumerate(tags_list, 2):
                if i <= 5:
                    bullet = ET.SubElement(desc_data, "BulletPoint")
                    bullet.text = tag.strip().capitalize()
        
        # Product Data –¥–ª—è Automotive –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        product_data_elem = ET.SubElement(product, "ProductData")
        automotive = ET.SubElement(product_data_elem, "Automotive")
        
        # Automotive specific data
        auto_misc = ET.SubElement(automotive, "AutomotiveMisc")
        ET.SubElement(auto_misc, "ProductType").text = "Wiper Blade"
        
        # Variation Data (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if len(product_data['variants']) > 1:
            variation = ET.SubElement(automotive, "VariationData")
            ET.SubElement(variation, "Parentage").text = "parent"
            ET.SubElement(variation, "VariationTheme").text = "Size"
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã–π XML
        xml_str = ET.tostring(envelope, encoding='unicode')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        formatted_xml = self._format_xml(xml_str)
        
        print("‚úÖ Amazon Listing XML —Å–æ–∑–¥–∞–Ω!")
        print(f"üìÑ –†–∞–∑–º–µ—Ä XML: {len(formatted_xml)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return formatted_xml, sku
    
    def create_amazon_inventory_feed(self, sku, quantity):
        """–°–æ–∑–¥–∞–µ–º XML –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ Inventory Feed –¥–ª—è SKU: {sku}")
        
        envelope = ET.Element("AmazonEnvelope")
        envelope.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
        envelope.set("xsi:noNamespaceSchemaLocation", "amzn-envelope.xsd")
        
        # Header
        header = ET.SubElement(envelope, "Header")
        ET.SubElement(header, "DocumentVersion").text = "1.01"
        ET.SubElement(header, "MerchantIdentifier").text = "MERCHANT_ID"
        
        # Message Type
        ET.SubElement(envelope, "MessageType").text = "Inventory"
        
        # Message
        message = ET.SubElement(envelope, "Message")
        ET.SubElement(message, "MessageID").text = "1"
        ET.SubElement(message, "OperationType").text = "Update"
        
        # Inventory
        inventory = ET.SubElement(message, "Inventory")
        ET.SubElement(inventory, "SKU").text = sku
        ET.SubElement(inventory, "Quantity").text = str(max(0, quantity))
        ET.SubElement(inventory, "FulfillmentLatency").text = "2"  # 2 –¥–Ω—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        xml_str = ET.tostring(envelope, encoding='unicode')
        formatted_xml = self._format_xml(xml_str)
        
        print(f"‚úÖ Inventory XML —Å–æ–∑–¥–∞–Ω (–æ—Å—Ç–∞—Ç–æ–∫: {quantity})")
        return formatted_xml
    
    def create_amazon_price_feed(self, sku, price):
        """–°–æ–∑–¥–∞–µ–º XML –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        print(f"\nüí∞ –°–æ–∑–¥–∞–Ω–∏–µ Price Feed –¥–ª—è SKU: {sku}")
        
        envelope = ET.Element("AmazonEnvelope")
        envelope.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
        envelope.set("xsi:noNamespaceSchemaLocation", "amzn-envelope.xsd")
        
        # Header
        header = ET.SubElement(envelope, "Header")
        ET.SubElement(header, "DocumentVersion").text = "1.01"
        ET.SubElement(header, "MerchantIdentifier").text = "MERCHANT_ID"
        
        # Message Type
        ET.SubElement(envelope, "MessageType").text = "Price"
        
        # Message
        message = ET.SubElement(envelope, "Message")
        ET.SubElement(message, "MessageID").text = "1"
        ET.SubElement(message, "OperationType").text = "Update"
        
        # Price
        price_elem = ET.SubElement(message, "Price")
        ET.SubElement(price_elem, "SKU").text = sku
        ET.SubElement(price_elem, "StandardPrice", currency="USD").text = str(price)
        
        xml_str = ET.tostring(envelope, encoding='unicode')
        formatted_xml = self._format_xml(xml_str)
        
        print(f"‚úÖ Price XML —Å–æ–∑–¥–∞–Ω (—Ü–µ–Ω–∞: ${price})")
        return formatted_xml
    
    def _format_xml(self, xml_string):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        try:
            import xml.dom.minidom as minidom
            dom = minidom.parseString(xml_string)
            return dom.toprettyxml(indent="  ")
        except:
            return xml_string
    
    def simulate_amazon_upload(self, product_xml, inventory_xml, price_xml, sku):
        """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Amazon (–ø–æ—Å–∫–æ–ª—å–∫—É Feeds API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ sandbox)"""
        print("\nüöÄ –≠–¢–ê–ü 3: –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Amazon")
        print("=" * 50)
        
        print("üì§ –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–∏ XML –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑:")
        print("   1. Feeds API - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        print("   2. Inventory Feed - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤")
        print("   3. Price Feed - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å feed (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –≤ sandbox, –Ω–æ –ø–æ–∫–∞–∂–µ–º –ø—Ä–æ—Ü–µ—Å—Å)
        print("\nüß™ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Product Feed –≤ sandbox:")
        
        feed_data = {
            "feedType": "POST_PRODUCT_DATA",
            "marketplaceIds": ["ATVPDKIKX0DER"],
            "inputFeedDocumentId": "dummy-document-id"
        }
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
        print(f"üìã Feed Type: {feed_data['feedType']}")
        print(f"üåç Marketplace: {feed_data['marketplaceIds']}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Amazon
        feed_response = self.amazon_client.make_api_request(
            "/feeds/2021-06-30/feeds",
            method="POST",
            data=feed_data
        )
        
        if feed_response:
            print("‚úÖ Feed —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è feed (–æ–∂–∏–¥–∞–µ–º–æ –≤ sandbox)")
            print("üí° –í production —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º XML —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        self._save_xml_files(product_xml, inventory_xml, price_xml, sku)
    
    def _save_xml_files(self, product_xml, inventory_xml, price_xml, sku):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ XML —Ñ–∞–π–ª—ã"""
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ XML —Ñ–∞–π–ª–æ–≤:")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è XML —Ñ–∞–π–ª–æ–≤
        xml_dir = os.path.join(os.path.dirname(__file__), "amazon_xml_feeds")
        os.makedirs(xml_dir, exist_ok=True)
        
        files_created = []
        
        # Product Feed
        product_file = os.path.join(xml_dir, f"product_feed_{sku}.xml")
        with open(product_file, 'w', encoding='utf-8') as f:
            f.write(product_xml)
        files_created.append(product_file)
        print(f"   üìÑ Product Feed: {product_file}")
        
        # Inventory Feed
        inventory_file = os.path.join(xml_dir, f"inventory_feed_{sku}.xml")
        with open(inventory_file, 'w', encoding='utf-8') as f:
            f.write(inventory_xml)
        files_created.append(inventory_file)
        print(f"   üì¶ Inventory Feed: {inventory_file}")
        
        # Price Feed
        price_file = os.path.join(xml_dir, f"price_feed_{sku}.xml")
        with open(price_file, 'w', encoding='utf-8') as f:
            f.write(price_xml)
        files_created.append(price_file)
        print(f"   üí∞ Price Feed: {price_file}")
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(files_created)} XML —Ñ–∞–π–ª–æ–≤")
        return files_created
    
    def create_product_summary(self, product_data, sku):
        """–°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        main_variant = product_data['variants'][0] if product_data['variants'] else {}
        
        print("üõçÔ∏è  –ò–°–•–û–î–ù–´–ô –¢–û–í–ê–† SHOPIFY:")
        print(f"   üìù ID: {product_data['shopify_id']}")
        print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data['title']}")
        print(f"   üè¢ –ë—Ä–µ–Ω–¥: {product_data['vendor']}")
        print(f"   üí∞ –¶–µ–Ω–∞: ${main_variant.get('price', '0.00')}")
        print(f"   üè∑Ô∏è  SKU: {main_variant.get('sku', 'N/A')}")
        print(f"   üìä –û—Å—Ç–∞—Ç–æ–∫: {main_variant.get('inventory_quantity', 0)} —à—Ç.")
        print(f"   üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(product_data['images'])}")
        
        print("\nüöÄ –°–û–ó–î–ê–í–ê–ï–ú–´–ô –õ–ò–°–¢–ò–ù–ì AMAZON:")
        print(f"   üè∑Ô∏è  SKU: {sku}")
        print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: Automotive ‚Üí Replacement Parts")
        print(f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Shopify")
        print(f"   üéØ Bullet Points: –°–æ–∑–¥–∞–Ω–æ –∏–∑ —Ç–µ–≥–æ–≤")
        print(f"   üí∞ –¶–µ–Ω–∞: ${main_variant.get('price', '0.00')} USD")
        print(f"   üì¶ –û—Å—Ç–∞—Ç–æ–∫: {main_variant.get('inventory_quantity', 0)} —à—Ç.")
        
        print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("   üéØ –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Amazon")
        print("   üì§ XML feeds —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("   üîÑ –í production –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –í PRODUCTION:")
        print("   1. –ó–∞–≥—Ä—É–∑–∏—Ç—å Product Feed —á–µ—Ä–µ–∑ Feeds API")
        print("   2. –ó–∞–≥—Ä—É–∑–∏—Ç—å Inventory Feed –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤")
        print("   3. –ó–∞–≥—Ä—É–∑–∏—Ç—å Price Feed –¥–ª—è —Ü–µ–Ω—ã")
        print("   4. –î–æ–∂–¥–∞—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Amazon (–æ–±—ã—á–Ω–æ 15-30 –º–∏–Ω—É—Ç)")
        print("   5. –¢–æ–≤–∞—Ä –ø–æ—è–≤–∏—Ç—Å—è –≤ –≤–∞—à–µ–º Seller Central")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SHOPIFY ‚Üí AMAZON: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    print("üéØ –¶–µ–ª—å: –°–æ–∑–¥–∞—Ç—å Bosch Aerotwin A950S –≤ Amazon")
    print("=" * 60)
    
    creator = ShopifyToAmazonCreator()
    
    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Amazon
    if not creator.amazon_client.get_access_token():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Amazon")
        return
    
    # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ Shopify
    product_data = creator.get_shopify_product_details()
    if not product_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ Shopify")
        return
    
    # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–µ–º XML –¥–ª—è Amazon
    product_xml, sku = creator.create_amazon_listing_xml(product_data)
    
    main_variant = product_data['variants'][0] if product_data['variants'] else {}
    inventory_xml = creator.create_amazon_inventory_feed(
        sku, 
        main_variant.get('inventory_quantity', 0)
    )
    price_xml = creator.create_amazon_price_feed(
        sku,
        float(main_variant.get('price', '0.00'))
    )
    
    # –≠—Ç–∞–ø 3: –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    creator.simulate_amazon_upload(product_xml, inventory_xml, price_xml, sku)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    creator.create_product_summary(product_data, sku)
    
    print("\nüéâ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ï–ù!")
    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ XML —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src/amazon_xml_feeds/")

if __name__ == "__main__":
    main()